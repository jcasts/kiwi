= TODO

# route :get => :get
# route :post => :post
# route "POST :route/update/:id" => :put

* Look at what configs to move from Kiwi to Kiwi::App
* Investigate difference between action and link.
  * E.g. OPTIONS implementation is a link, not an action.

* Implement logger
* Implement framework-wide modable status codes
* Implement adapter picking, and one more adapter (thrift?)
* Investigate in-framework multithreaded/evented/fork model.
* Implement multi-app class
  * Allow multi-app to describe all available apps
* HTML, JSON, PLIST, XML, YAML serializers (Kiwi::App attribute)
  * May require layout implementation. (HTML, XML)
* Kiwi apps should be easily self-encapsulated, deployable, and bootable.

* How can hidden html fields be conveyed?
* Routes should be global and point to a resource.
  * Show rerouted resource methods in the resource links.
* Review errors raised by Resources to not be HTTP specific.
* Support streaming

== Done

* Implement error hooks and handling
* Fix errors to have a "status" method.
* Fix content-type and accept headers in App.
* Implement triggers/hooks
* Allow param pre-set values
* More end-user friendly error messages (especially on 400s)
* Include the _type (and optional _link) attribute automatically on known
  sub-resources
* Implement param type coersion from String
* Allow attributes that match a set array of values
* Return 400 when non-supported param is given

== Maybe

* Support in-Kiwi middleware (Kiwi::App attribute)
  * Middleware request is called after Resource has been identified and assigned
    to env['kiwi.resource']
  * Middleware response is pre-body serialization (and pre-validation?)
  * Serializer gets assigned to env['kiwi.serializer']

* HTTP Method route mapping per app
  * Swappable route parser
* Kiwi apps should run standalone as a command line app with options.
* Allow setting a description for every resource action.
* Differentiate between executable link and buildable link. (kinda done)
